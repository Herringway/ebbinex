module dumpimage;

import common;
import std.algorithm;
import std.array;
import std.conv;
import std.format;
import std.getopt;
import std.meta;
import std.path;
import std.range;
import std.random;
import std.stdio;
import std.string;
import std.traits;


enum BattleSpriteSize : ubyte{
    _32x32 = 1,
    _64x32 = 2,
    _32x64 = 3,
    _64x64 = 4,
    _128x64 = 5,
    _128x128 = 6,
}

align(1) struct Entry {
    align(1):
    uint ptr;
    BattleSpriteSize size;
}

string[] dumpBattleSprites(string dir, string baseName, string, ubyte[] source, ulong offset, const DumpDoc doc, const CommonData commonData, const(ubyte)[] allData) {
    auto entries = cast(Entry[])source;
    string[] filenames;
    foreach (idx, entry; entries) {
        auto compressedFilename = setExtension(idx.text, "gfx.lzhal");
        const data = getCompressedData(allData[entry.ptr - 0xC00000 .. $]);
        File(buildPath(dir, compressedFilename), "w").rawWrite(data);
        filenames ~= compressedFilename;
        version(Have_compy) version(Have_tilecon) {
            import compy : decomp, Format;
            auto uncompressedFilename = setExtension(idx.text, "png");
            const tiles = pixelMatrices(decomp(Format.HALLZ2, data), TileFormat.intertwined4BPP);
            const arrangement = arrangements[entry.size];
            const palettes = defaultPalette;
            saveImage(buildPath(dir, uncompressedFilename), tiles, arrangement, palettes);
            filenames ~= uncompressedFilename;
        }
    }
    return filenames;
}

version(Have_tilecon):
import tilecon.arrangement;
import tilecon.imagesaver;
import pixelatrix;
import magicalrainbows;

static immutable defaultPalette = [[RGBA8888(0,0,0, 255), RGBA8888(128,0,0, 255), RGBA8888(0,128,0, 255), RGBA8888(128,128,0, 255), RGBA8888(0,0,128, 255), RGBA8888(128,0,128, 255), RGBA8888(0,128,128, 255), RGBA8888(192,192,192, 255), RGBA8888(128,128,128, 255), RGBA8888(255,0,0, 255), RGBA8888(0,255,0, 255), RGBA8888(255,255,0, 255), RGBA8888(0,0,255, 255), RGBA8888(255,0,255, 255), RGBA8888(0,255,255, 255), RGBA8888(255,255,255, 255), RGBA8888(0,0,0, 255), RGBA8888(0,0,95, 255), RGBA8888(0,0,135, 255), RGBA8888(0,0,175, 255), RGBA8888(0,0,215, 255), RGBA8888(0,0,255, 255), RGBA8888(0,95,0, 255), RGBA8888(0,95,95, 255), RGBA8888(0,95,135, 255), RGBA8888(0,95,175, 255), RGBA8888(0,95,215, 255), RGBA8888(0,95,255, 255), RGBA8888(0,135,0, 255), RGBA8888(0,135,95, 255), RGBA8888(0,135,135, 255), RGBA8888(0,135,175, 255), RGBA8888(0,135,215, 255), RGBA8888(0,135,255, 255), RGBA8888(0,175,0, 255), RGBA8888(0,175,95, 255), RGBA8888(0,175,135, 255), RGBA8888(0,175,175, 255), RGBA8888(0,175,215, 255), RGBA8888(0,175,255, 255), RGBA8888(0,215,0, 255), RGBA8888(0,215,95, 255), RGBA8888(0,215,135, 255), RGBA8888(0,215,175, 255), RGBA8888(0,215,215, 255), RGBA8888(0,215,255, 255), RGBA8888(0,255,0, 255), RGBA8888(0,255,95, 255), RGBA8888(0,255,135, 255), RGBA8888(0,255,175, 255), RGBA8888(0,255,215, 255), RGBA8888(0,255,255, 255), RGBA8888(95,0,0, 255), RGBA8888(95,0,95, 255), RGBA8888(95,0,135, 255), RGBA8888(95,0,175, 255), RGBA8888(95,0,215, 255), RGBA8888(95,0,255, 255), RGBA8888(95,95,0, 255), RGBA8888(95,95,95, 255), RGBA8888(95,95,135, 255), RGBA8888(95,95,175, 255), RGBA8888(95,95,215, 255), RGBA8888(95,95,255, 255), RGBA8888(95,135,0, 255), RGBA8888(95,135,95, 255), RGBA8888(95,135,135, 255), RGBA8888(95,135,175, 255), RGBA8888(95,135,215, 255), RGBA8888(95,135,255, 255), RGBA8888(95,175,0, 255), RGBA8888(95,175,95, 255), RGBA8888(95,175,135, 255), RGBA8888(95,175,175, 255), RGBA8888(95,175,215, 255), RGBA8888(95,175,255, 255), RGBA8888(95,215,0, 255), RGBA8888(95,215,95, 255), RGBA8888(95,215,135, 255), RGBA8888(95,215,175, 255), RGBA8888(95,215,215, 255), RGBA8888(95,215,255, 255), RGBA8888(95,255,0, 255), RGBA8888(95,255,95, 255), RGBA8888(95,255,135, 255), RGBA8888(95,255,175, 255), RGBA8888(95,255,215, 255), RGBA8888(95,255,255, 255), RGBA8888(135,0,0, 255), RGBA8888(135,0,95, 255), RGBA8888(135,0,135, 255), RGBA8888(135,0,175, 255), RGBA8888(135,0,215, 255), RGBA8888(135,0,255, 255), RGBA8888(135,95,0, 255), RGBA8888(135,95,95, 255), RGBA8888(135,95,135, 255), RGBA8888(135,95,175, 255), RGBA8888(135,95,215, 255), RGBA8888(135,95,255, 255), RGBA8888(135,135,0, 255), RGBA8888(135,135,95, 255), RGBA8888(135,135,135, 255), RGBA8888(135,135,175, 255), RGBA8888(135,135,215, 255), RGBA8888(135,135,255, 255), RGBA8888(135,175,0, 255), RGBA8888(135,175,95, 255), RGBA8888(135,175,135, 255), RGBA8888(135,175,175, 255), RGBA8888(135,175,215, 255), RGBA8888(135,175,255, 255), RGBA8888(135,215,0, 255), RGBA8888(135,215,95, 255), RGBA8888(135,215,135, 255), RGBA8888(135,215,175, 255), RGBA8888(135,215,215, 255), RGBA8888(135,215,255, 255), RGBA8888(135,255,0, 255), RGBA8888(135,255,95, 255), RGBA8888(135,255,135, 255), RGBA8888(135,255,175, 255), RGBA8888(135,255,215, 255), RGBA8888(135,255,255, 255), RGBA8888(175,0,0, 255), RGBA8888(175,0,95, 255), RGBA8888(175,0,135, 255), RGBA8888(175,0,175, 255), RGBA8888(175,0,215, 255), RGBA8888(175,0,255, 255), RGBA8888(175,95,0, 255), RGBA8888(175,95,95, 255), RGBA8888(175,95,135, 255), RGBA8888(175,95,175, 255), RGBA8888(175,95,215, 255), RGBA8888(175,95,255, 255), RGBA8888(175,135,0, 255), RGBA8888(175,135,95, 255), RGBA8888(175,135,135, 255), RGBA8888(175,135,175, 255), RGBA8888(175,135,215, 255), RGBA8888(175,135,255, 255), RGBA8888(175,175,0, 255), RGBA8888(175,175,95, 255), RGBA8888(175,175,135, 255), RGBA8888(175,175,175, 255), RGBA8888(175,175,215, 255), RGBA8888(175,175,255, 255), RGBA8888(175,215,0, 255), RGBA8888(175,215,95, 255), RGBA8888(175,215,135, 255), RGBA8888(175,215,175, 255), RGBA8888(175,215,215, 255), RGBA8888(175,215,255, 255), RGBA8888(175,255,0, 255), RGBA8888(175,255,95, 255), RGBA8888(175,255,135, 255), RGBA8888(175,255,175, 255), RGBA8888(175,255,215, 255), RGBA8888(175,255,255, 255), RGBA8888(215,0,0, 255), RGBA8888(215,0,95, 255), RGBA8888(215,0,135, 255), RGBA8888(215,0,175, 255), RGBA8888(215,0,215, 255), RGBA8888(215,0,255, 255), RGBA8888(215,95,0, 255), RGBA8888(215,95,95, 255), RGBA8888(215,95,135, 255), RGBA8888(215,95,175, 255), RGBA8888(215,95,215, 255), RGBA8888(215,95,255, 255), RGBA8888(215,135,0, 255), RGBA8888(215,135,95, 255), RGBA8888(215,135,135, 255), RGBA8888(215,135,175, 255), RGBA8888(215,135,215, 255), RGBA8888(215,135,255, 255), RGBA8888(215,175,0, 255), RGBA8888(215,175,95, 255), RGBA8888(215,175,135, 255), RGBA8888(215,175,175, 255), RGBA8888(215,175,215, 255), RGBA8888(215,175,255, 255), RGBA8888(215,215,0, 255), RGBA8888(215,215,95, 255), RGBA8888(215,215,135, 255), RGBA8888(215,215,175, 255), RGBA8888(215,215,215, 255), RGBA8888(215,215,255, 255), RGBA8888(215,255,0, 255), RGBA8888(215,255,95, 255), RGBA8888(215,255,135, 255), RGBA8888(215,255,175, 255), RGBA8888(215,255,215, 255), RGBA8888(215,255,255, 255), RGBA8888(255,0,0, 255), RGBA8888(255,0,95, 255), RGBA8888(255,0,135, 255), RGBA8888(255,0,175, 255), RGBA8888(255,0,215, 255), RGBA8888(255,0,255, 255), RGBA8888(255,95,0, 255), RGBA8888(255,95,95, 255), RGBA8888(255,95,135, 255), RGBA8888(255,95,175, 255), RGBA8888(255,95,215, 255), RGBA8888(255,95,255, 255), RGBA8888(255,135,0, 255), RGBA8888(255,135,95, 255), RGBA8888(255,135,135, 255), RGBA8888(255,135,175, 255), RGBA8888(255,135,215, 255), RGBA8888(255,135,255, 255), RGBA8888(255,175,0, 255), RGBA8888(255,175,95, 255), RGBA8888(255,175,135, 255), RGBA8888(255,175,175, 255), RGBA8888(255,175,215, 255), RGBA8888(255,175,255, 255), RGBA8888(255,215,0, 255), RGBA8888(255,215,95, 255), RGBA8888(255,215,135, 255), RGBA8888(255,215,175, 255), RGBA8888(255,215,215, 255), RGBA8888(255,215,255, 255), RGBA8888(255,255,0, 255), RGBA8888(255,255,95, 255), RGBA8888(255,255,135, 255), RGBA8888(255,255,175, 255), RGBA8888(255,255,215, 255), RGBA8888(255,255,255, 255), RGBA8888(8,8,8, 255), RGBA8888(18,18,18, 255), RGBA8888(28,28,28, 255), RGBA8888(38,38,38, 255), RGBA8888(48,48,48, 255), RGBA8888(58,58,58, 255), RGBA8888(68,68,68, 255), RGBA8888(78,78,78, 255), RGBA8888(88,88,88, 255), RGBA8888(98,98,98, 255), RGBA8888(108,108,108, 255), RGBA8888(118,118,118, 255), RGBA8888(128,128,128, 255), RGBA8888(138,138,138, 255), RGBA8888(148,148,148, 255), RGBA8888(158,158,158, 255), RGBA8888(168,168,168, 255), RGBA8888(178,178,178, 255), RGBA8888(188,188,188, 255), RGBA8888(198,198,198, 255), RGBA8888(208,208,208, 255), RGBA8888(218,218,218, 255), RGBA8888(228,228,228, 255), RGBA8888(238,238,238, 255)]];


immutable Arrangement[BattleSpriteSize] arrangements;

shared static this() {
    arrangements = [
        BattleSpriteSize._128x128: Arrangement(generateArr(16, 16), 16),
        BattleSpriteSize._128x64: Arrangement(generateArr(16, 8), 16),
        BattleSpriteSize._64x64: Arrangement(generateArr(8, 8), 8),
        BattleSpriteSize._64x32: Arrangement(generateArr(8, 4), 8),
        BattleSpriteSize._32x64: Arrangement(generateArr(4, 8), 4),
        BattleSpriteSize._32x32: Arrangement(generateArr(4, 4), 4),
    ];
}

TileAttributes[] generateArr(size_t width, size_t height) pure {
    TileAttributes[][] vals = new TileAttributes[][](height, width);
    foreach (i; 0 .. width * height / 16) {
        const startX = ((i * 4) / width) * 4;
        const startY = ((i * 4) % width);
        foreach (x, ref column; vals[startX .. startX + 4]) {
            foreach (y, ref tile; column[startY .. startY + 4]) {
                tile.tile = x * 4 + y + i * 16;
            }
        }
    }
    return vals.join();
}
